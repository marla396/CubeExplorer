layout (local_size_x = 16, local_size_y = 16) in;

#include "ext/complex.glsl"

layout (binding = 0, rgba32f) writeonly uniform image2D tex_unit0; //tilde_hkt_dx choppy-x displacement
layout (binding = 1, rgba32f) writeonly uniform image2D tex_unit1; //tilde_hkt_dy height displacement
layout (binding = 2, rgba32f) writeonly uniform image2D tex_unit2; //tilde_hkt_dz choppy-z displacement
layout (binding = 3, rgba32f) readonly uniform image2D tex_unit3; //tilde_h0k
layout (binding = 4, rgba32f) readonly uniform image2D tex_unit4; //tilde_h0minusk

uniform int N;
uniform int L;
uniform float t;

void main(void){
	vec2 x = ivec2(gl_GlobalInvocationID.xy) - float(N)/2.0;
	
	vec2 k = vec2(2.0 * M_PI * x.x/L, 2.0 * M_PI * x.y/L);
	
	float magnitude = max(length(k), 0.00001);

	float w = sqrt(9.81 * magnitude);
	
	complex fourier_amp = complex(imageLoad(tex_unit3, ivec2(gl_GlobalInvocationID.xy)).r, 
							imageLoad(tex_unit3, ivec2(gl_GlobalInvocationID.xy)).g);
	
	complex fourier_amp_conj = conj(complex(imageLoad(tex_unit4, ivec2(gl_GlobalInvocationID.xy)).r, imageLoad(tex_unit4, ivec2(gl_GlobalInvocationID.xy)).g));
		
	float cosinus = cos(w*t);
	float sinus = sin(w*t);
		
	// euler formula
	complex exp_iwt = complex(cosinus, sinus);
	complex exp_iwt_inv = complex(cosinus, -sinus);
	
	// dy
	complex h_k_t_dy = add(mul(fourier_amp, exp_iwt), (mul(fourier_amp_conj, exp_iwt_inv)));
	
	// dx
	complex dx = complex(0.0,-k.x/magnitude);
	complex h_k_t_dx = mul(dx, h_k_t_dy);
	
	// dz
	complex dy = complex(0.0,-k.y/magnitude);
	complex h_k_t_dz = mul(dy, h_k_t_dy);

	imageStore(tex_unit0, ivec2(gl_GlobalInvocationID.xy), vec4(h_k_t_dx.real, h_k_t_dx.im, 0, 1));
	imageStore(tex_unit1, ivec2(gl_GlobalInvocationID.xy), vec4(h_k_t_dy.real, h_k_t_dy.im, 0, 1));
	imageStore(tex_unit2, ivec2(gl_GlobalInvocationID.xy), vec4(h_k_t_dz.real, h_k_t_dz.im, 0, 1));
}