layout(triangles, fractional_odd_spacing, ccw) in;

#include "ext/shadows_vert.glsl"

in vec3 world_position_tes[];
in vec2 tex_coords_tes[];

out vec3 world_position_frag;
out vec2 tex_coords_frag;
out vec4 clip_space;
out vec3 tangent;

uniform mat4 view_projection_matrix;

uniform sampler2D tex_unit0; //displacement map dy
uniform sampler2D tex_unit1; //height map
uniform sampler2D tex_unit5; //displacement map dx
uniform sampler2D tex_unit6; //displacement map dz

uniform float water_height;
uniform float displacement_factor;
uniform vec2 quad_instance;
uniform int quad_dimension;

void calculate_tangent(){
	vec3 v0 = world_position_tes[0];
	vec3 v1 = world_position_tes[1].xyz;
	vec3 v2 = world_position_tes[2].xyz;

    vec3 e1 = v1 - v0;
    vec3 e2 = v2 - v0;

    float dU1 = tex_coords_tes[1].x - tex_coords_tes[0].x;
    float dV1 = tex_coords_tes[1].y - tex_coords_tes[0].y;
    float dU2 = tex_coords_tes[2].x - tex_coords_tes[0].x;
    float dV2 = tex_coords_tes[2].y - tex_coords_tes[0].y;

    float f = 1.0 / (dU1 * dV2 - dU2 * dV1);

    vec3 t;

    t.x = f * (dV2 * e1.x - dV1 * e2.x);
    t.y = f * (dV2 * e1.y - dV1 * e2.y);
    t.z = f * (dV2 * e1.z - dV1 * e2.z);
	
	tangent = normalize(t);
}

vec2 lerp2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 lerp3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

void main(void){

	calculate_tangent();
   	world_position_frag = lerp3D(world_position_tes[0], world_position_tes[1], world_position_tes[2]);
	tex_coords_frag = lerp2D(tex_coords_tes[0], tex_coords_tes[1], tex_coords_tes[2]);

	tex_coords_frag = tex_coords_frag / quad_dimension + quad_instance;

	vec2 height_coords = vec2(tex_coords_frag.y, tex_coords_frag.x);

	float water_depth = water_height - texture(tex_unit1, height_coords).r;
	
	water_depth = max(0.0, water_depth);

	if (water_depth > 0.0){
		water_depth = 1.0;
	}

	float displacement_y = texture(tex_unit0, tex_coords_frag).r;
	float displacement_x = texture(tex_unit5, tex_coords_frag).r;
	float displacement_z = texture(tex_unit6, tex_coords_frag).r;

	world_position_frag.y += displacement_y * water_depth * displacement_factor;
	world_position_frag.x += displacement_x * water_depth * displacement_factor;
	world_position_frag.z += displacement_z * water_depth * displacement_factor;

	clip_space = view_projection_matrix * vec4(world_position_frag, 1.0);

	transform_shadow_coords(vec4(world_position_frag, 1.0), clip_space.z);

	gl_Position = clip_space;
}
